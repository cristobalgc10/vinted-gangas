"""
Script de migraci√≥n para crear la tabla de configuraci√≥n.

Ejecuta este script para a√±adir la tabla 'settings' a tu base de datos existente.

Uso:
    python init_settings.py
"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import settings as app_config
from app.database import Base
from app.models import Settings

def init_settings_table():
    """
    Crea la tabla de configuraci√≥n si no existe.
    """
    print("üîß Inicializando tabla de configuraci√≥n...")
    
    # Conectar a la base de datos
    engine = create_engine(
        app_config.DATABASE_URL,
        connect_args={"check_same_thread": False} if "sqlite" in app_config.DATABASE_URL else {}
    )
    
    # Crear solo la tabla Settings si no existe
    Base.metadata.create_all(bind=engine, tables=[Settings.__table__])
    
    print("‚úÖ Tabla 'settings' creada correctamente")
    
    # Crear sesi√≥n
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        # Verificar si ya existe configuraci√≥n
        existing_settings = db.query(Settings).filter(Settings.id == 1).first()
        
        if existing_settings:
            print("‚ÑπÔ∏è  Ya existe una configuraci√≥n en la base de datos")
        else:
            # Crear configuraci√≥n por defecto
            default_settings = Settings(id=1)
            db.add(default_settings)
            db.commit()
            print("‚úÖ Configuraci√≥n por defecto creada")
            
            # Mostrar configuraci√≥n creada
            print("\nüìã Configuraci√≥n inicial:")
            print(f"  - Dominio Vinted: {default_settings.vinted_domain}")
            print(f"  - Tema: {default_settings.theme}")
            print(f"  - Idioma: {default_settings.language}")
            print(f"  - Moneda: {default_settings.currency}")
            print(f"  - Productos m√°x por b√∫squeda: {default_settings.max_products_per_search}")
            print(f"  - Eliminar productos despu√©s de: {default_settings.auto_delete_products_days} d√≠as")
            
    except Exception as e:
        print(f"‚ùå Error al crear configuraci√≥n: {e}")
        db.rollback()
    finally:
        db.close()
    
    print("\nüéâ Migraci√≥n completada")


if __name__ == "__main__":
    init_settings_table()
