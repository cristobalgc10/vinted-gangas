"""
Punto de entrada principal de la aplicaci√≥n Vinted Scraper.

Este archivo:
1. Crea la aplicaci√≥n FastAPI
2. Configura archivos est√°ticos y templates
3. Registra las rutas (routers)
4. Inicializa la base de datos
5. Arranca el scheduler autom√°tico
6. Gestiona el ciclo de vida de la aplicaci√≥n

‚≠ê VERSI√ìN MEJORADA:
- Task Manager actualizado con get_task_manager()
- Mejor manejo de errores en startup
- Logs m√°s informativos
- Health check mejorado con info del scheduler
"""

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager

from config import settings
from app.database import init_db


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestiona el ciclo de vida de la aplicaci√≥n.
    
    Lifespan es una funci√≥n especial de FastAPI que se ejecuta:
    - ANTES de que la app empiece a recibir peticiones (startup)
    - DESPU√âS de que la app termine (shutdown)
    
    Uso del context manager (async with):
    - Todo ANTES del 'yield' se ejecuta al INICIAR
    - Todo DESPU√âS del 'yield' se ejecuta al TERMINAR
    """
    # ========================================================================
    # --- STARTUP ---
    # ========================================================================
    print("\n" + "="*80)
    print("üöÄ VINTED SCRAPER - INICIANDO")
    print("="*80)
    
    # 1. Inicializar base de datos (crear tablas si no existen)
    print("\nüìä Inicializando base de datos...")
    try:
        init_db()
        print("‚úÖ Base de datos lista")
    except Exception as e:
        print(f"‚ùå Error inicializando BD: {e}")
        raise
    
    # 2. Inicializar configuraci√≥n por defecto si no existe
    print("\n‚öôÔ∏è  Verificando configuraci√≥n...")
    from app.database import SessionLocal
    from app.models import Settings
    
    db = SessionLocal()
    try:
        settings_record = db.query(Settings).filter(Settings.id == 1).first()
        if not settings_record:
            print("   üìù Creando configuraci√≥n por defecto...")
            default_settings = Settings(id=1)
            db.add(default_settings)
            db.commit()
            db.refresh(default_settings)
            print("   ‚úÖ Configuraci√≥n inicializada")
            print(f"      ‚Ä¢ Dominio: {default_settings.vinted_domain}")
            print(f"      ‚Ä¢ Notificaciones de errores: {'Activadas' if default_settings.scheduler_error_notifications_enabled else 'Desactivadas'}")
        else:
            print(f"   ‚úÖ Configuraci√≥n cargada")
            print(f"      ‚Ä¢ Dominio: {settings_record.vinted_domain}")
            print(f"      ‚Ä¢ User-Agents: {'Rotativo' if settings_record.user_agent_rotation else 'Fijo'}")
            print(f"      ‚Ä¢ Proxies: {'Activados' if settings_record.proxies_enabled else 'Desactivados'}")
            print(f"      ‚Ä¢ Notificaciones de errores: {'Activadas (' + str(settings_record.scheduler_error_threshold) + ' fallos)' if settings_record.scheduler_error_notifications_enabled else 'Desactivadas'}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error al inicializar configuraci√≥n: {e}")
        print("   Continuando con valores por defecto...")
    finally:
        db.close()
    
    # 3. Iniciar el scheduler para ejecuciones autom√°ticas
    print("\nüìÖ Iniciando scheduler...")
    try:
        # ‚≠ê CAMBIO IMPORTANTE: Usar get_task_manager() en lugar de get_scheduler()
        from app.scheduler.task_manager import get_task_manager
        
        task_manager = get_task_manager()
        task_manager.start()
        
        # Obtener estad√≠sticas del scheduler
        status = task_manager.get_status()
        print(f"   ‚úÖ Scheduler iniciado")
        print(f"      ‚Ä¢ B√∫squedas activas: {status['search_jobs_count']}")
        print(f"      ‚Ä¢ Jobs de mantenimiento: {status['maintenance_jobs_count']}")
        print(f"      ‚Ä¢ Total de jobs: {status['jobs_count']}")
        
        # Mostrar pr√≥ximas ejecuciones si hay
        if status['next_executions']:
            print(f"\n   ‚è∞ Pr√≥ximas ejecuciones:")
            for job in status['next_executions'][:3]:
                print(f"      ‚Ä¢ {job['name']}: {job['next_run']}")
    
    except ImportError as e:
        print(f"   ‚ùå Error importando task_manager: {e}")
        print("   El servidor continuar√° SIN scheduler autom√°tico")
    except Exception as e:
        print(f"   ‚ùå Error iniciando scheduler: {e}")
        print("   El servidor continuar√° SIN scheduler autom√°tico")
    
    # 4. Informaci√≥n final
    print("\n" + "="*80)
    print("‚úÖ APLICACI√ìN LISTA")
    print("="*80)
    print(f"üìç Servidor: http://localhost:8000")
    print(f"üìö API Docs: http://localhost:8000/docs")
    print(f"üìä Dashboard: http://localhost:8000/")
    print(f"üìÖ Scheduler: http://localhost:8000/scheduler")
    print(f"‚öôÔ∏è  Configuraci√≥n: http://localhost:8000/settings")
    print("="*80 + "\n")
    
    yield  # La aplicaci√≥n se ejecuta aqu√≠ (manejando peticiones)
    
    # ========================================================================
    # --- SHUTDOWN ---
    # ========================================================================
    print("\n" + "="*80)
    print("üõë VINTED SCRAPER - DETENIENDO")
    print("="*80)
    
    # Detener el scheduler de forma ordenada
    try:
        from app.scheduler.task_manager import get_task_manager
        task_manager = get_task_manager()
        task_manager.stop()
        print("‚úÖ Scheduler detenido correctamente")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error deteniendo scheduler: {e}")
    
    print("="*80)
    print("üëã ¬°HASTA PRONTO!")
    print("="*80 + "\n")


# ============================================================================
# CREAR LA APLICACI√ìN FASTAPI
# ============================================================================

app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="Sistema de scraping autom√°tico para encontrar productos en Vinted con scheduler avanzado y notificaciones",
    lifespan=lifespan,
    debug=settings.DEBUG
)


# ============================================================================
# EXCEPTION HANDLERS
# ============================================================================

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    """
    Maneja errores de validaci√≥n de Pydantic de forma m√°s clara.
    √ötil para debugging durante el desarrollo.
    """
    print(f"‚ùå Error de validaci√≥n en {request.method} {request.url.path}")
    for error in exc.errors():
        print(f"   ‚Ä¢ {error['loc']}: {error['msg']}")
    
    return JSONResponse(
        status_code=422,
        content={
            "detail": exc.errors(),
            "body": str(exc.body) if hasattr(exc, 'body') else None
        }
    )


# ============================================================================
# ARCHIVOS EST√ÅTICOS Y TEMPLATES
# ============================================================================

# Montar archivos est√°ticos (CSS, JS, im√°genes)
# Esto hace que /static/css/style.css sea accesible en la web
try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
except RuntimeError:
    print("‚ö†Ô∏è  Carpeta 'static' no encontrada, continuando sin archivos est√°ticos")

# Configurar templates Jinja2
# Esto nos permite renderizar HTML con datos din√°micos
templates = Jinja2Templates(directory="templates")

# ‚≠ê Filtro para banderas Unicode a partir de c√≥digo pa√≠s
def country_flag(code):
    """
    Convierte un c√≥digo de pa√≠s (ES, FR, etc.) en su emoji de bandera.
    Ejemplo: country_flag("ES") -> "üá™üá∏"
    """
    if not code or len(code) != 2:
        return ""
    code = code.upper()
    OFFSET = 127397  # Offset Unicode para banderas
    return chr(ord(code[0]) + OFFSET) + chr(ord(code[1]) + OFFSET)

templates.env.filters["country_flag"] = country_flag

# ‚≠ê Filtro para formatear fechas de forma amigable
def format_date(dt, format='%d/%m/%Y %H:%M'):
    """
    Formatea una fecha de forma amigable.
    """
    if not dt:
        return "N/A"
    try:
        return dt.strftime(format)
    except:
        return str(dt)

templates.env.filters["format_date"] = format_date

# ‚≠ê Filtro para formatear n√∫meros con separador de miles
def format_number(num):
    """
    Formatea un n√∫mero con separador de miles.
    Ejemplo: 1234567 -> "1,234,567"
    """
    if num is None:
        return "0"
    try:
        return "{:,.0f}".format(float(num))
    except:
        return str(num)

templates.env.filters["format_number"] = format_number

# Hacer templates disponible globalmente en la app
app.state.templates = templates


# ============================================================================
# REGISTRAR ROUTERS
# ============================================================================

from app.routers import web, api, settings_web, settings_api

# Router web (p√°ginas HTML) - sin prefijo, rutas en la ra√≠z
app.include_router(web.router, tags=["Web"])

# Router web de configuraci√≥n (p√°gina /settings)
app.include_router(settings_web.router, tags=["Settings Web"])

# Router API (endpoints REST) - con prefijo /api
app.include_router(api.router, prefix="/api", tags=["API"])

# Router API de configuraci√≥n
app.include_router(settings_api.router, prefix="/api", tags=["Settings API"])


# ============================================================================
# ENDPOINTS ESPECIALES
# ============================================================================

@app.get("/health")
async def health_check():
    """
    Endpoint de health check mejorado.
    
    √ötil para monitoreo y verificar que:
    - La app est√° viva
    - La BD est√° accesible
    - El scheduler est√° funcionando
    """
    from app.database import SessionLocal
    
    # Verificar BD
    db_healthy = False
    try:
        db = SessionLocal()
        db.execute("SELECT 1")
        db.close()
        db_healthy = True
    except Exception as e:
        print(f"‚ö†Ô∏è  Health check - BD no accesible: {e}")
    
    # Verificar Scheduler
    scheduler_healthy = False
    scheduler_info = {}
    try:
        from app.scheduler.task_manager import get_task_manager
        task_manager = get_task_manager()
        status = task_manager.get_status()
        scheduler_healthy = status['running']
        scheduler_info = {
            "running": status['running'],
            "jobs": status['jobs_count'],
            "active_searches": status['search_jobs_count']
        }
    except Exception as e:
        print(f"‚ö†Ô∏è  Health check - Scheduler no accesible: {e}")
    
    # Respuesta
    overall_healthy = db_healthy and scheduler_healthy
    
    return {
        "status": "healthy" if overall_healthy else "degraded",
        "app": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "components": {
            "database": "healthy" if db_healthy else "unhealthy",
            "scheduler": "healthy" if scheduler_healthy else "unhealthy"
        },
        "scheduler": scheduler_info if scheduler_healthy else None
    }


@app.get("/version")
async def version_info():
    """
    Informaci√≥n de versi√≥n de la aplicaci√≥n.
    """
    return {
        "app": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "debug": settings.DEBUG
    }


# ============================================================================
# EJECUTAR SERVIDOR
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    
    # Uvicorn es el servidor ASGI que ejecuta FastAPI
    uvicorn.run(
        "main:app",  # Formato: "archivo:variable"
        host="0.0.0.0",  # Escuchar en todas las interfaces
        port=8000,
        reload=True,  # Auto-reload cuando cambiamos c√≥digo (solo en desarrollo)
        log_level="info"
    )